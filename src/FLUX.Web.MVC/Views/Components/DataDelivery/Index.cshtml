@using FLUX.DomainObjects;

@model DataStructure.Tree.TreeItem<MultiLayerDataContainer>
@{ 
    int counter = 0;
    var postbackPattern = nameof(PostbackTree.Artists)+"[0]";
}

@functions
{
    private IEnumerable<MultiLayerDataViewModel> Iterate(DataStructure.Tree.ITreeItem<MultiLayerDataContainer> tree)
    {
        return tree.Children.Select(c => new MultiLayerDataViewModel(c.Value, "", 3, FLUX.Web.MVC.TagHelpers.MultiLayerDataTagHelper.Keys[3]));
    }
}
<div class="theScrollContainer">
    
    <form action="@Url.Action("Index","Persist")" method="post">
        <div class="ArtistSize">
            <div class="floatingContainer">
                <multi-layer-data model="@Model" level="0" class="Artist" name-for="@postbackPattern" />
                <div class="cfix"></div>
                <input type="submit" value="Nicht clicken" />
            </div>
        </div>
        @{ 
            int albumCounter = 0;
        }

    @foreach (var album in Model.Children)
    {
        var albumPattern = postbackPattern +"."+ nameof(ArtistNode.Albums) + string.Format("[{0}]", albumCounter);

            <multi-layer-data model="@album" level="1" class="Album" name-for="@albumPattern"/>
            <div class="cfix"></div>
        int cdCounter = 0;
        foreach (var cd in album.Children)
        {
              var cdPattern = albumPattern + "." + nameof(AlbumNode.Cds) + string.Format("[{0}]", cdCounter);

                <multi-layer-data model="@cd" level="2" class="CD" name-for="@cdPattern" />

                <div class="container Songs">
                    <table class="SongTable">
                        <colgroup>
                            <col class="originTR" />
                            <col class="track" />
                            <col class="title" />
                        </colgroup>
                        <tbody>
                            @{
                                int songCounter = 0;
                            }
                            @foreach (var song in Iterate(cd))
                            {                                
                                song.NamePattern = cdPattern +"."+ nameof(CdNode.Songs) + string.Format("[{0}]", songCounter);
                                var originalValue = song.OriginalValue;
                                var trimmed = originalValue.Substring(0, Math.Min(35, originalValue.Length));

                                <tr id="@song.ID">
                                    <td title="@originalValue">
                                        @trimmed
                                        <input type="hidden" value="@song.ID" name="@(song.NamePattern + ".Id")" />
                                    </td>
                                    @for (int s = 0; s < song.Keys.Count; s++)
                                    {
                                        <td><div class="fullWidth">
                                            @Html.Partial("DataCollection", song.RetrieveData(song.Keys[s], s == song.Keys.Count - 1))
                                        </div></td>
                                    }
                                    <td>
                                </tr>

                                songCounter = songCounter+ 1;
                            }
                        </tbody>
                    </table>
                </div>
                <div class="cfix"></div>
                cdCounter++;
            }
            albumCounter++;
        }

    </form>
</div>